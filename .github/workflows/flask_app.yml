name: Flask CI/CD

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flask
        pip install flake8 pytest coverage
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test with pytest
      run: |
        pytest flask_app/tests/
        
    - name: Generate coverage report
      run: |
        coverage run -m pytest flask_app/tests/
        coverage report
        coverage xml
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.xml

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r projects deployment/
        cp -r tests deployment/
        cp requirements.txt deployment/
        # Create frozen requirements for reproducible builds
        pip freeze > deployment/requirements-freeze.txt
        # Add a simple startup script
        echo '#!/bin/bash' > deployment/start.sh
        echo 'export FLASK_APP=projects/flask_app/flask_app.py' >> deployment/start.sh
        echo 'flask run --host=0.0.0.0' >> deployment/start.sh
        chmod +x deployment/start.sh
        
    - name: Archive deployment package
      run: |
        tar -czvf flask-app-${{ github.sha }}.tar.gz deployment/
        
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: flask-app-deployment
        path: flask-app-${{ github.sha }}.tar.gz

  # Optional mock deployment step for learning
  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v4
      with:
        name: flask-app-deployment
        
    - name: Extract package
      run: |
        mkdir staging
        tar -xzvf flask-app-${{ github.sha }}.tar.gz -C staging
        
    - name: Display deployment information
      run: |
        echo "Application would be deployed to staging server"
        echo "Deployment package contents:"
        ls -la staging/deployment
        echo "=== Deployment successful (simulated) ==="